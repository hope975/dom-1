{"mappings":"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","sources":["src/dom.js"],"sourcesContent":["window.dom = {\r\n    //创建节点-----------------------------------------------------------------------------------\r\n    create(string) {\r\n        const container = document.createElement('template')//template内可以容纳任何标签\r\n        container.innerHTML = string.trim() //把字符串转换为html标签  trim()可以把字符串两边的空格去掉\r\n        return container.content.firstChild\r\n    },\r\n    //创建弟弟-----------------------------------------------------------------------------------\r\n        after(node, node2) {//把node2插入到node下一个节点的前面（就是创建弟弟）\r\n            node.parentNode.insertBefore(node2,node.nextSibling)\r\n    },\r\n    //创建哥哥-----------------------------------------------------------------------------------\r\n        before(node, node2) {\r\n            node.parentNode.insertBefore(node2,node)\r\n    },\r\n    //创建儿子-----------------------------------------------------------------------------------  \r\n        append(parent, node) {\r\n            parent.appendChild(node)\r\n    },  \r\n    //创建爸爸--------------------------------------------------------------------------------------\r\n        wrap(node, parent) {\r\n            dom.before(node, parent)//先把parent插到node的前面，此时二者为兄弟关系\r\n            dom.append(parent, node)//再把node插到parent的内部，此时原来的node会被干掉（append的特点）\r\n    },\r\n    //删除节点-----------------------------------------------------------------------------------\r\n    remove(node) {\r\n        node.parentNode.removeChild(node)\r\n        return node//获取被删除节点的引用(方便移除之后做些手脚再放回去)\r\n    },\r\n    //删除节点所有后代节点----------------------------------------------------------------------------\r\n    empty(node) {\r\n        // 可以直接用node.innerHTML='',但这种方法获取不到引用\r\n        /* const { childNodes } = node //获取到node所有的孩子\r\n        // const childNodes=node.childNodes */\r\n        const array = []\r\n        let x = node.firstChild\r\n        while (x) {//当x存在时\r\n            // console.log(node.firstChild)\r\n            array.push(dom.remove(node.firstChild))\r\n            // console.log(node.firstChild)\r\n            x=node.firstChild//x这里是动态变化的\r\n        }\r\n        return array\r\n    },\r\n    //改属性-------------------------------------------------------------------------------\r\n    attr(node,name,value) {//重载，根据参数写代码\r\n        if (arguments.length === 3) {//如果参数为3个，修改属性\r\n            node.setAttribute(name,value)\r\n        } else if (arguments.length === 2) {//如果参数为两个，获取属性\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n    //改文本内容------------------------------------------------------------------------------------\r\n    text(node, string) {//适配\r\n        if (arguments.length === 2) {//两个参数，说明你想设置\r\n           if ('innerText' in node) {\r\n            node.innerText=(string)  //ie\r\n        } else {\r\n            node.innerText=(string)  //firefox\r\n        } \r\n        } else if (arguments.length === 1) {//一个参数为获取\r\n            if ('innerText' in node) {\r\n            return node.innerText=(string)  //ie\r\n        } else {\r\n            return node.innerText=(string)  //firefox\r\n        } \r\n        }\r\n        \r\n    },\r\n    //改html------------------------------------------------------------------------------------\r\n    html(node, string) {//两个参数为修改\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n        } else if (arguments.length === 1) {//一个参数为获取\r\n            return node.innerHTML\r\n        }  \r\n    },\r\n    //改样式----------------------------------------------------------------------------------\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {//3个参数改样式\r\n            //dom.style(div,'color','red')\r\n            node.style[name]=value\r\n        } else if (arguments.length === 2) {\r\n            //dom.style(div,'color')想获取color\r\n            if (typeof name === 'string') {//name如果是一个字符串就是读取属性值\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {//name是一个实例化的对象，就是name如果是对象就是修改\r\n            //dom.style(div,{color:'red'})想改color\r\n            const object=name\r\n            for (key in object) {\r\n            node.style[key]=object[key]\r\n        }\r\n            }\r\n        }  \r\n    },\r\n    //改class类名----------------------------------------------------------------------------\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        remove(node, className) {\r\n            node,classList.remove(className)\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n    //修改事件监听事件-----------------------------------------------------------------------------------\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName,fn)\r\n    },\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName,fn)\r\n    },\r\n    //查,find用于获取标签或标签们-------------------------------------------------------------------------------\r\n    find(selector, scope) {\r\n        return (scope||document).querySelectorAll(selector)//存在scope就在scope调用，没有就直接调用\r\n    },\r\n    //获取元素的爸爸-------------------------------------------------------------------------------\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    //获取元素的儿子-----------------------------------------------------------------------------\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    //获取元素的兄弟姐妹----------------------------------------------------------------------------\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children).filter(n => n !== node)\r\n            //filter只对数组生效，所以要把孩子转化为数组\r\n            //只要遍历孩子，若孩子不等于我们传的孩子，就过滤一下放到当前数组\r\n    },\r\n    //获取弟弟------------------------------------------------------------------------------\r\n    next(node) {//nextSibling会返回文本节点，需要判断\r\n        let x=node.nextSibling\r\n        while (x&&x.nodeType === 3) {//当节点存在且为文本时\r\n            x=x.nextSibling//继续查找下一个节点\r\n        }\r\n        return x//不存在就直接返回x\r\n    },\r\n    //获取哥哥----------------------------------------------------------------------------------\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {//当节点存在且为文本时\r\n            x = x.previousSibling//继续查找上一个节点\r\n        }\r\n        return x//不存在就直接返回x\r\n    },\r\n    //遍历所有节点------------------------------------------------------------------------------\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++){\r\n            fn.call(null,nodeList[i])\r\n        }\r\n    },\r\n    //获取元素的index-----------------------------------------------------------------------------\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        for (var i = 0; i < list.length; i++){\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i\r\n    }\r\n    }\r\n    \r\n\r\n// window.dom = {} //初始化dom为一个空对象\r\n// dom.create=function(){}"],"names":[],"version":3,"file":"index.755bdb92.js.map","sourceRoot":"/__parcel_source_root/"}